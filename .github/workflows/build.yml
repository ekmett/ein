name: CMake

on:
  push:

jobs:
  docker:
    name: Find image
    runs-on: ubuntu-latest
    outputs:
      image: '${{ steps.hash.outputs.image }}'
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout-cone-mode: false
          sparse-checkout: Dockerfile
      - name: hash
        id: hash
        run: |
          hash=$(sha256sum "${GITHUB_WORKSPACE}/Dockerfile" | awk '{print substr($1, 1, 12)}')
          image="ghcr.io/${GITHUB_REPOSITORY}:${hash}-local-1001"
          echo "docker image: $image"
          echo "image=${image}" >> "$GITHUB_OUTPUT"

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: lint
        run: make -C '${{github.workspace}}' lint

  build:
    name: Build with Docker
    runs-on: ubuntu-latest
    needs: docker
    container:
      image: '${{ needs.docker.outputs.image }}'
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: retain ccache
        uses: hendrikmuhs/ccache-action@v1.2
      - name: set paths
        id: paths
        run: echo "gen=/__w/ein/ein/gen" >> "$GITHUB_OUTPUT"
      - name: cache lib/cache
        id: libcache
        uses: actions/cache@v4
        with:
          path: /__w/ein/ein/lib/cache
          key: '${{ runner.os }}-cache'
      - name: make
        run: make -C /__w/ein/ein || echo FAILED
      - name: setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: false # ${{ failure() }}
        timeout-minutes: 15
      - name: upload binaries
        uses: actions/upload-artifact@v4.4.3
        with:
          name: bin
          path: |
            ${{ steps.paths.outputs.gen }}/bin/
            ${{ steps.paths.outputs.gen }}/lib/
            ${{ steps.paths.outputs.gen }}/CMakeCache.txt
            ${{ steps.paths.outputs.gen }}/CMakeFiles/
            ${{ steps.paths.outputs.gen }}/**/CTestTestfile.cmake
      - name: upload docs
        uses: actions/upload-artifact@v4.4.3
        with:
          name: doc
          path: ${{ steps.paths.outputs.gen }}/doc/html/
      - name: upload trace
        uses: actions/upload-artifact@v4.4.3
        with:
          name: ein-build-trace.json
          path: ${{ steps.paths.outputs.gen }}/trace.json
      - name: publish doc
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: '${{ secrets.GITHUB_TOKEN }}'  # Use single quotes here
          publish_dir: ${{ steps.paths.outputs.gen }}/doc/html/
      - name: test
        working-directory: '${{ steps.paths.outputs.gen }}'
        run: ctest -V

  traditional-build:
    name: Build without Docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup/ubuntu/compiler
      - uses: ./.github/actions/setup/ubuntu/build-tools
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ubuntu-latest-ccache
      - name: cache lib/cache
        id: libcache
        uses: actions/cache@v4
        with:
          path: '${{ github.workspace }}/lib/cache'
          key: '${{ runner.os }}-cache'
      - name: set reusable strings
        id: paths
        run: echo "gen=${{ github.workspace }}/gen" >> "$GITHUB_OUTPUT"
      - name: configure and build
        run: make -C '${{ github.workspace }}'
      - name: test
        working-directory: ${{ steps.paths.outputs.gen }}
        run: ctest -V
      - name: setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: false # ${{ failure() }}
        timeout-minutes: 10
