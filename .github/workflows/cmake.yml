name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: checkout code
      uses: actions/checkout@v4
    - name: lint
      run: make lint
  setup:
    runs-on: ubuntu-latest
    steps:
    - name: checkout code
      uses: actions/checkout@v4
    - name: cache tools
      uses: actions/cache@v4.1.1
      with:
        path: |
          /usr/local/bin/ninja
          /opt/cmake
          /usr/lib/llvm-19
          /usr/include/clang/19
          /usr/local/bin/doxygen
          /usr/share/doxygen
        key: ${{ runner.os }}-tools-cache
    - name: set tool path
      run: |
        export PATH=/opt/cmake/bin:/usr/local/bin:$PATH
    - name: install cmake 3.30.5
      run: |
        if command -v cmake &> /dev/null; then
          cmake --version
        else
          echo "cmake is not installed."
        fi
        if ! cmake --version | grep "3.30.5"; then
          wget https://github.com/Kitware/CMake/releases/download/v3.30.5/cmake-3.30.5-linux-x86_64.sh
          sudo mkdir /opt/cmake
          sudo sh cmake-3.30.5-linux-x86_64.sh --skip-license --prefix=/opt/cmake
          sudo ln -sf /opt/cmake/bin/cmake /usr/local/bin/cmake
          cmake --version
        fi
    - name: install ninja 1.12.1
      run: |
        if command -v ninja &> /dev/null; then
          ninja --version
        else
          echo "ninja is not installed."
        fi
        if ! command -v ninja &> /dev/null || ! ninja --version | grep "1.12.1"; then
          wget https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-linux.zip
          sudo apt-get install -y unzip
          unzip ninja-linux.zip -d /usr/local/bin/
          sudo chmod +x /usr/local/bin/ninja
          ninja --version
        fi
    - name: install clang 19
      run: |
        if command -v clang++-19 &> /dev/null; then
          clang++-19 --version
        else
          echo "clang++-19 is not installed."
        fi
        if ! command -v clang++-19 &> /dev/null || ! clang++-19 --version | grep "clang version 19"; then
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 19
          sudo apt-get install -y clang-tools-19 lld-19
          clang++-19 --version
        fi
    - name: install doxygen 1.12.0
      run: |
        if command -v doxygen &> /dev/null; then
          doxygen --version
        else
          echo "doxygen is not installed"
        fi
        if ! command -v doxygen &> /dev/null || ! doxygen --version | grep "1.12.0"; then
          sudo apt-get remove --purge -y doxygen
          wget https://www.doxygen.nl/files/doxygen-1.12.0.linux.bin.tar.gz
          tar xvfpz doxygen-1.12.0.linux.bin.tar.gz
          cd doxygen-1.12.0/
          sudo make install
          doxygen --version
        fi

  build:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        build_type: [RelWithDebInfo, Release]
    steps:
    - name: checkout code
      uses: actions/checkout@v4
    - name: restore cached tools
      uses: actions/cache@v4.1.1
      with:
        path: |
          /usr/local/bin/ninja
          /opt/cmake
          /usr/lib/llvm-19
          /usr/include/clang/19
          /usr/local/bin/doxygen
          /usr/share/doxygen
        key: ${{ runner.os }}-tools-cache
    - name: set tool path
      run: |
        export PATH=/opt/cmake/bin:/usr/local/bin:$PATH
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-19 200
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-19 200
        sudo update-alternatives --install /usr/bin/ld ld /usr/bin/ld.lld-19 200
        sudo update-alternatives --install /usr/bin/clang-scan-deps clang-scan-deps /usr/bin/clang-scan-deps-19 200
    - name: set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    - name: configure
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=clang++
        -DCMAKE_C_COMPILER=clang
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        -DCMAKE_COLOR_DIAGNOSTICS=ON
        -G Ninja
        -S ${{ github.workspace }}
    - name: build
      run: |
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
    - name: upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.build_type}} build
        path: ${{ steps.strings.outputs.build-output-dir }}

  test:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        build_type: [RelWithDebInfo]
    steps:
    - name: checkout code
      uses: actions/checkout@v4
    - name: restore tools
      uses: actions/cache@v4.1.1
      with:
        path: |
          /usr/local/bin/ninja
          /opt/cmake
        key: ${{ runner.os }}-tools-cache
    - name: download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.build_type}} build
        path: ${{ steps.strings.outputs.build-output-dir }}
    - name: set tool path
      run: |
        export PATH=/opt/cmake/bin:/usr/local/bin:$PATH
    - name: test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        ctest --build-config ${{ matrix.build_type }}

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
    steps:
    - name: download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.build_type}} build
        path: ${{ steps.strings.outputs.build-output-dir }}
    - name: publish docs
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ${{ steps.strings.outputs.build-output-dir}}/docs/html
